@page "/register"

<PageTitle>Register</PageTitle>

<AuthorizeView Context="authContext">
    <Authorized>
        <div class="alert alert-success">You're already logged in as @authContext.User.Identity?.Name.</div>
    </Authorized>
    <NotAuthorized>
            <h2 class="subtitle">Register as a new user.</h2>
            <hr/>
            <div class="columns is-centered">
                <section class="column is-one-third">
                    @if (_result is not null && _result.IsSuccess)
                    {
                        <div class="notification is-success">
                            You successfully registered. Now you can <a href="login">login</a>.
                        </div>
                    }
                    else
                    {
                        <EditForm Model="Model" OnValidSubmit="RegisterUserAsync">
                        <FluentValidationValidator/>
                        <div class="field">
                            <p class="control has-icons-left has-icons-right">
                                <InputText @bind-Value="Model.Email" type="email" autocomplete="username"  class="input" placeholder="Email"/>
                                <span class="icon is-small is-left">
                                    <i class="fas fa-envelope"></i>
                                </span>
                            </p>
                            <ValidationMessage For="() => Model.Email" class="has-text-danger"/>
                        </div>
                        <div class="field">
                            <p class="control has-icons-left">
                                <InputText @bind-Value="Model.Password" class="input" type="password" autocomplete="new-password" placeholder="Password"/>
                                <span class="icon is-small is-left">
                                    <i class="fas fa-lock"></i>
                                </span>
                            </p>
                            <ValidationMessage For="() => Model.Password" class="has-text-danger"/>
                        </div>
                        <div class="field">
                            <p class="control has-icons-left">
                                <InputText @bind-Value="Model.ConfirmPassword" class="input" type="password" autocomplete="new-password" placeholder="Confirm Password"/>
                                <span class="icon is-small is-left">
                                    <i class="fas fa-lock"></i>
                                </span>
                            </p>
                            <ValidationMessage For="() => Model.ConfirmPassword" class="has-text-danger"/>
                        </div>
                        <div class="field is-grouped is-grouped-right">
                            <p class="control">
                                <button type="submit" class="button is-light">Register</button>
                            </p>
                        </div>
                    </EditForm>
                    }
                    
                    @if (_result is not null && !_result.IsSuccess)
                    {
                        <div class="mt-3">
                            @foreach (var error in _result.Errors)
                            {
                                <div class="notification is-danger">@error</div>
                            }
                        </div>
                    }
                </section>
            </div>

    </NotAuthorized>
</AuthorizeView>